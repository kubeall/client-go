/*
Copyright 2022 The kubeall.com Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeall/api/metrics/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceMetricsLister helps list ServiceMetricses.
// All objects returned here must be treated as read-only.
type ServiceMetricsLister interface {
	// List lists all ServiceMetricses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceMetrics, err error)
	// ServiceMetricses returns an object that can list and get ServiceMetricses.
	ServiceMetricses(namespace string) ServiceMetricsNamespaceLister
	ServiceMetricsListerExpansion
}

// serviceMetricsLister implements the ServiceMetricsLister interface.
type serviceMetricsLister struct {
	indexer cache.Indexer
}

// NewServiceMetricsLister returns a new ServiceMetricsLister.
func NewServiceMetricsLister(indexer cache.Indexer) ServiceMetricsLister {
	return &serviceMetricsLister{indexer: indexer}
}

// List lists all ServiceMetricses in the indexer.
func (s *serviceMetricsLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceMetrics, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceMetrics))
	})
	return ret, err
}

// ServiceMetricses returns an object that can list and get ServiceMetricses.
func (s *serviceMetricsLister) ServiceMetricses(namespace string) ServiceMetricsNamespaceLister {
	return serviceMetricsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceMetricsNamespaceLister helps list and get ServiceMetricses.
// All objects returned here must be treated as read-only.
type ServiceMetricsNamespaceLister interface {
	// List lists all ServiceMetricses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceMetrics, err error)
	// Get retrieves the ServiceMetrics from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceMetrics, error)
	ServiceMetricsNamespaceListerExpansion
}

// serviceMetricsNamespaceLister implements the ServiceMetricsNamespaceLister
// interface.
type serviceMetricsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceMetricses in the indexer for a given namespace.
func (s serviceMetricsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceMetrics, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceMetrics))
	})
	return ret, err
}

// Get retrieves the ServiceMetrics from the indexer for a given namespace and name.
func (s serviceMetricsNamespaceLister) Get(name string) (*v1alpha1.ServiceMetrics, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicemetrics"), name)
	}
	return obj.(*v1alpha1.ServiceMetrics), nil
}
